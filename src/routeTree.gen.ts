/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicImport } from './routes/_public'
import { Route as AuthAuthLayoutImport } from './routes/auth/_auth-layout'
import { Route as AdminAdminLayoutImport } from './routes/admin/_admin-layout'

// Create Virtual Routes

const AuthImport = createFileRoute('/auth')()
const AdminImport = createFileRoute('/admin')()
const PublicIndexLazyImport = createFileRoute('/_public/')()
const AdminAdminLayoutIndexLazyImport = createFileRoute(
  '/admin/_admin-layout/',
)()
const AuthAuthLayoutSignUpLazyImport = createFileRoute(
  '/auth/_auth-layout/sign-up',
)()
const AuthAuthLayoutSignInLazyImport = createFileRoute(
  '/auth/_auth-layout/sign-in',
)()
const AdminAdminLayoutSettingsLazyImport = createFileRoute(
  '/admin/_admin-layout/settings',
)()
const AdminAdminLayoutRolesLazyImport = createFileRoute(
  '/admin/_admin-layout/roles',
)()
const AdminAdminLayoutCustomerLazyImport = createFileRoute(
  '/admin/_admin-layout/customer',
)()
const AdminAdminLayoutContactLazyImport = createFileRoute(
  '/admin/_admin-layout/contact',
)()
const AdminAdminLayoutChangePasswordLazyImport = createFileRoute(
  '/admin/_admin-layout/change-password',
)()
const AdminAdminLayoutCategoryLazyImport = createFileRoute(
  '/admin/_admin-layout/category',
)()
const AdminAdminLayoutAccountsLazyImport = createFileRoute(
  '/admin/_admin-layout/accounts',
)()
const AdminAdminLayoutCustomerHistoryIdLazyImport = createFileRoute(
  '/admin/_admin-layout/customer-history/$id',
)()

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const PublicIndexLazyRoute = PublicIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRoute,
} as any).lazy(() => import('./routes/_public/index.lazy').then((d) => d.Route))

const AuthAuthLayoutRoute = AuthAuthLayoutImport.update({
  id: '/_auth-layout',
  getParentRoute: () => AuthRoute,
} as any)

const AdminAdminLayoutRoute = AdminAdminLayoutImport.update({
  id: '/_admin-layout',
  getParentRoute: () => AdminRoute,
} as any)

const AdminAdminLayoutIndexLazyRoute = AdminAdminLayoutIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminAdminLayoutRoute,
} as any).lazy(() =>
  import('./routes/admin/_admin-layout/index.lazy').then((d) => d.Route),
)

const AuthAuthLayoutSignUpLazyRoute = AuthAuthLayoutSignUpLazyImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => AuthAuthLayoutRoute,
} as any).lazy(() =>
  import('./routes/auth/_auth-layout/sign-up.lazy').then((d) => d.Route),
)

const AuthAuthLayoutSignInLazyRoute = AuthAuthLayoutSignInLazyImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthAuthLayoutRoute,
} as any).lazy(() =>
  import('./routes/auth/_auth-layout/sign-in.lazy').then((d) => d.Route),
)

const AdminAdminLayoutSettingsLazyRoute =
  AdminAdminLayoutSettingsLazyImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => AdminAdminLayoutRoute,
  } as any).lazy(() =>
    import('./routes/admin/_admin-layout/settings.lazy').then((d) => d.Route),
  )

const AdminAdminLayoutRolesLazyRoute = AdminAdminLayoutRolesLazyImport.update({
  id: '/roles',
  path: '/roles',
  getParentRoute: () => AdminAdminLayoutRoute,
} as any).lazy(() =>
  import('./routes/admin/_admin-layout/roles.lazy').then((d) => d.Route),
)

const AdminAdminLayoutCustomerLazyRoute =
  AdminAdminLayoutCustomerLazyImport.update({
    id: '/customer',
    path: '/customer',
    getParentRoute: () => AdminAdminLayoutRoute,
  } as any).lazy(() =>
    import('./routes/admin/_admin-layout/customer.lazy').then((d) => d.Route),
  )

const AdminAdminLayoutContactLazyRoute =
  AdminAdminLayoutContactLazyImport.update({
    id: '/contact',
    path: '/contact',
    getParentRoute: () => AdminAdminLayoutRoute,
  } as any).lazy(() =>
    import('./routes/admin/_admin-layout/contact.lazy').then((d) => d.Route),
  )

const AdminAdminLayoutChangePasswordLazyRoute =
  AdminAdminLayoutChangePasswordLazyImport.update({
    id: '/change-password',
    path: '/change-password',
    getParentRoute: () => AdminAdminLayoutRoute,
  } as any).lazy(() =>
    import('./routes/admin/_admin-layout/change-password.lazy').then(
      (d) => d.Route,
    ),
  )

const AdminAdminLayoutCategoryLazyRoute =
  AdminAdminLayoutCategoryLazyImport.update({
    id: '/category',
    path: '/category',
    getParentRoute: () => AdminAdminLayoutRoute,
  } as any).lazy(() =>
    import('./routes/admin/_admin-layout/category.lazy').then((d) => d.Route),
  )

const AdminAdminLayoutAccountsLazyRoute =
  AdminAdminLayoutAccountsLazyImport.update({
    id: '/accounts',
    path: '/accounts',
    getParentRoute: () => AdminAdminLayoutRoute,
  } as any).lazy(() =>
    import('./routes/admin/_admin-layout/accounts.lazy').then((d) => d.Route),
  )

const AdminAdminLayoutCustomerHistoryIdLazyRoute =
  AdminAdminLayoutCustomerHistoryIdLazyImport.update({
    id: '/customer-history/$id',
    path: '/customer-history/$id',
    getParentRoute: () => AdminAdminLayoutRoute,
  } as any).lazy(() =>
    import('./routes/admin/_admin-layout/customer-history.$id.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/admin/_admin-layout': {
      id: '/admin/_admin-layout'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminAdminLayoutImport
      parentRoute: typeof AdminRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/auth/_auth-layout': {
      id: '/auth/_auth-layout'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthAuthLayoutImport
      parentRoute: typeof AuthRoute
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexLazyImport
      parentRoute: typeof PublicImport
    }
    '/admin/_admin-layout/accounts': {
      id: '/admin/_admin-layout/accounts'
      path: '/accounts'
      fullPath: '/admin/accounts'
      preLoaderRoute: typeof AdminAdminLayoutAccountsLazyImport
      parentRoute: typeof AdminAdminLayoutImport
    }
    '/admin/_admin-layout/category': {
      id: '/admin/_admin-layout/category'
      path: '/category'
      fullPath: '/admin/category'
      preLoaderRoute: typeof AdminAdminLayoutCategoryLazyImport
      parentRoute: typeof AdminAdminLayoutImport
    }
    '/admin/_admin-layout/change-password': {
      id: '/admin/_admin-layout/change-password'
      path: '/change-password'
      fullPath: '/admin/change-password'
      preLoaderRoute: typeof AdminAdminLayoutChangePasswordLazyImport
      parentRoute: typeof AdminAdminLayoutImport
    }
    '/admin/_admin-layout/contact': {
      id: '/admin/_admin-layout/contact'
      path: '/contact'
      fullPath: '/admin/contact'
      preLoaderRoute: typeof AdminAdminLayoutContactLazyImport
      parentRoute: typeof AdminAdminLayoutImport
    }
    '/admin/_admin-layout/customer': {
      id: '/admin/_admin-layout/customer'
      path: '/customer'
      fullPath: '/admin/customer'
      preLoaderRoute: typeof AdminAdminLayoutCustomerLazyImport
      parentRoute: typeof AdminAdminLayoutImport
    }
    '/admin/_admin-layout/roles': {
      id: '/admin/_admin-layout/roles'
      path: '/roles'
      fullPath: '/admin/roles'
      preLoaderRoute: typeof AdminAdminLayoutRolesLazyImport
      parentRoute: typeof AdminAdminLayoutImport
    }
    '/admin/_admin-layout/settings': {
      id: '/admin/_admin-layout/settings'
      path: '/settings'
      fullPath: '/admin/settings'
      preLoaderRoute: typeof AdminAdminLayoutSettingsLazyImport
      parentRoute: typeof AdminAdminLayoutImport
    }
    '/auth/_auth-layout/sign-in': {
      id: '/auth/_auth-layout/sign-in'
      path: '/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthAuthLayoutSignInLazyImport
      parentRoute: typeof AuthAuthLayoutImport
    }
    '/auth/_auth-layout/sign-up': {
      id: '/auth/_auth-layout/sign-up'
      path: '/sign-up'
      fullPath: '/auth/sign-up'
      preLoaderRoute: typeof AuthAuthLayoutSignUpLazyImport
      parentRoute: typeof AuthAuthLayoutImport
    }
    '/admin/_admin-layout/': {
      id: '/admin/_admin-layout/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminAdminLayoutIndexLazyImport
      parentRoute: typeof AdminAdminLayoutImport
    }
    '/admin/_admin-layout/customer-history/$id': {
      id: '/admin/_admin-layout/customer-history/$id'
      path: '/customer-history/$id'
      fullPath: '/admin/customer-history/$id'
      preLoaderRoute: typeof AdminAdminLayoutCustomerHistoryIdLazyImport
      parentRoute: typeof AdminAdminLayoutImport
    }
  }
}

// Create and export the route tree

interface PublicRouteChildren {
  PublicIndexLazyRoute: typeof PublicIndexLazyRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicIndexLazyRoute: PublicIndexLazyRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

interface AdminAdminLayoutRouteChildren {
  AdminAdminLayoutAccountsLazyRoute: typeof AdminAdminLayoutAccountsLazyRoute
  AdminAdminLayoutCategoryLazyRoute: typeof AdminAdminLayoutCategoryLazyRoute
  AdminAdminLayoutChangePasswordLazyRoute: typeof AdminAdminLayoutChangePasswordLazyRoute
  AdminAdminLayoutContactLazyRoute: typeof AdminAdminLayoutContactLazyRoute
  AdminAdminLayoutCustomerLazyRoute: typeof AdminAdminLayoutCustomerLazyRoute
  AdminAdminLayoutRolesLazyRoute: typeof AdminAdminLayoutRolesLazyRoute
  AdminAdminLayoutSettingsLazyRoute: typeof AdminAdminLayoutSettingsLazyRoute
  AdminAdminLayoutIndexLazyRoute: typeof AdminAdminLayoutIndexLazyRoute
  AdminAdminLayoutCustomerHistoryIdLazyRoute: typeof AdminAdminLayoutCustomerHistoryIdLazyRoute
}

const AdminAdminLayoutRouteChildren: AdminAdminLayoutRouteChildren = {
  AdminAdminLayoutAccountsLazyRoute: AdminAdminLayoutAccountsLazyRoute,
  AdminAdminLayoutCategoryLazyRoute: AdminAdminLayoutCategoryLazyRoute,
  AdminAdminLayoutChangePasswordLazyRoute:
    AdminAdminLayoutChangePasswordLazyRoute,
  AdminAdminLayoutContactLazyRoute: AdminAdminLayoutContactLazyRoute,
  AdminAdminLayoutCustomerLazyRoute: AdminAdminLayoutCustomerLazyRoute,
  AdminAdminLayoutRolesLazyRoute: AdminAdminLayoutRolesLazyRoute,
  AdminAdminLayoutSettingsLazyRoute: AdminAdminLayoutSettingsLazyRoute,
  AdminAdminLayoutIndexLazyRoute: AdminAdminLayoutIndexLazyRoute,
  AdminAdminLayoutCustomerHistoryIdLazyRoute:
    AdminAdminLayoutCustomerHistoryIdLazyRoute,
}

const AdminAdminLayoutRouteWithChildren =
  AdminAdminLayoutRoute._addFileChildren(AdminAdminLayoutRouteChildren)

interface AdminRouteChildren {
  AdminAdminLayoutRoute: typeof AdminAdminLayoutRouteWithChildren
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminAdminLayoutRoute: AdminAdminLayoutRouteWithChildren,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface AuthAuthLayoutRouteChildren {
  AuthAuthLayoutSignInLazyRoute: typeof AuthAuthLayoutSignInLazyRoute
  AuthAuthLayoutSignUpLazyRoute: typeof AuthAuthLayoutSignUpLazyRoute
}

const AuthAuthLayoutRouteChildren: AuthAuthLayoutRouteChildren = {
  AuthAuthLayoutSignInLazyRoute: AuthAuthLayoutSignInLazyRoute,
  AuthAuthLayoutSignUpLazyRoute: AuthAuthLayoutSignUpLazyRoute,
}

const AuthAuthLayoutRouteWithChildren = AuthAuthLayoutRoute._addFileChildren(
  AuthAuthLayoutRouteChildren,
)

interface AuthRouteChildren {
  AuthAuthLayoutRoute: typeof AuthAuthLayoutRouteWithChildren
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthAuthLayoutRoute: AuthAuthLayoutRouteWithChildren,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof PublicRouteWithChildren
  '/admin': typeof AdminAdminLayoutRouteWithChildren
  '/auth': typeof AuthAuthLayoutRouteWithChildren
  '/': typeof PublicIndexLazyRoute
  '/admin/accounts': typeof AdminAdminLayoutAccountsLazyRoute
  '/admin/category': typeof AdminAdminLayoutCategoryLazyRoute
  '/admin/change-password': typeof AdminAdminLayoutChangePasswordLazyRoute
  '/admin/contact': typeof AdminAdminLayoutContactLazyRoute
  '/admin/customer': typeof AdminAdminLayoutCustomerLazyRoute
  '/admin/roles': typeof AdminAdminLayoutRolesLazyRoute
  '/admin/settings': typeof AdminAdminLayoutSettingsLazyRoute
  '/auth/sign-in': typeof AuthAuthLayoutSignInLazyRoute
  '/auth/sign-up': typeof AuthAuthLayoutSignUpLazyRoute
  '/admin/': typeof AdminAdminLayoutIndexLazyRoute
  '/admin/customer-history/$id': typeof AdminAdminLayoutCustomerHistoryIdLazyRoute
}

export interface FileRoutesByTo {
  '/admin': typeof AdminAdminLayoutIndexLazyRoute
  '/auth': typeof AuthAuthLayoutRouteWithChildren
  '/': typeof PublicIndexLazyRoute
  '/admin/accounts': typeof AdminAdminLayoutAccountsLazyRoute
  '/admin/category': typeof AdminAdminLayoutCategoryLazyRoute
  '/admin/change-password': typeof AdminAdminLayoutChangePasswordLazyRoute
  '/admin/contact': typeof AdminAdminLayoutContactLazyRoute
  '/admin/customer': typeof AdminAdminLayoutCustomerLazyRoute
  '/admin/roles': typeof AdminAdminLayoutRolesLazyRoute
  '/admin/settings': typeof AdminAdminLayoutSettingsLazyRoute
  '/auth/sign-in': typeof AuthAuthLayoutSignInLazyRoute
  '/auth/sign-up': typeof AuthAuthLayoutSignUpLazyRoute
  '/admin/customer-history/$id': typeof AdminAdminLayoutCustomerHistoryIdLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_public': typeof PublicRouteWithChildren
  '/admin': typeof AdminRouteWithChildren
  '/admin/_admin-layout': typeof AdminAdminLayoutRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/auth/_auth-layout': typeof AuthAuthLayoutRouteWithChildren
  '/_public/': typeof PublicIndexLazyRoute
  '/admin/_admin-layout/accounts': typeof AdminAdminLayoutAccountsLazyRoute
  '/admin/_admin-layout/category': typeof AdminAdminLayoutCategoryLazyRoute
  '/admin/_admin-layout/change-password': typeof AdminAdminLayoutChangePasswordLazyRoute
  '/admin/_admin-layout/contact': typeof AdminAdminLayoutContactLazyRoute
  '/admin/_admin-layout/customer': typeof AdminAdminLayoutCustomerLazyRoute
  '/admin/_admin-layout/roles': typeof AdminAdminLayoutRolesLazyRoute
  '/admin/_admin-layout/settings': typeof AdminAdminLayoutSettingsLazyRoute
  '/auth/_auth-layout/sign-in': typeof AuthAuthLayoutSignInLazyRoute
  '/auth/_auth-layout/sign-up': typeof AuthAuthLayoutSignUpLazyRoute
  '/admin/_admin-layout/': typeof AdminAdminLayoutIndexLazyRoute
  '/admin/_admin-layout/customer-history/$id': typeof AdminAdminLayoutCustomerHistoryIdLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/admin'
    | '/auth'
    | '/'
    | '/admin/accounts'
    | '/admin/category'
    | '/admin/change-password'
    | '/admin/contact'
    | '/admin/customer'
    | '/admin/roles'
    | '/admin/settings'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/admin/'
    | '/admin/customer-history/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/admin'
    | '/auth'
    | '/'
    | '/admin/accounts'
    | '/admin/category'
    | '/admin/change-password'
    | '/admin/contact'
    | '/admin/customer'
    | '/admin/roles'
    | '/admin/settings'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/admin/customer-history/$id'
  id:
    | '__root__'
    | '/_public'
    | '/admin'
    | '/admin/_admin-layout'
    | '/auth'
    | '/auth/_auth-layout'
    | '/_public/'
    | '/admin/_admin-layout/accounts'
    | '/admin/_admin-layout/category'
    | '/admin/_admin-layout/change-password'
    | '/admin/_admin-layout/contact'
    | '/admin/_admin-layout/customer'
    | '/admin/_admin-layout/roles'
    | '/admin/_admin-layout/settings'
    | '/auth/_auth-layout/sign-in'
    | '/auth/_auth-layout/sign-up'
    | '/admin/_admin-layout/'
    | '/admin/_admin-layout/customer-history/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PublicRoute: typeof PublicRouteWithChildren
  AdminRoute: typeof AdminRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  PublicRoute: PublicRouteWithChildren,
  AdminRoute: AdminRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_public",
        "/admin",
        "/auth"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx",
      "children": [
        "/_public/"
      ]
    },
    "/admin": {
      "filePath": "admin",
      "children": [
        "/admin/_admin-layout"
      ]
    },
    "/admin/_admin-layout": {
      "filePath": "admin/_admin-layout.tsx",
      "parent": "/admin",
      "children": [
        "/admin/_admin-layout/accounts",
        "/admin/_admin-layout/category",
        "/admin/_admin-layout/change-password",
        "/admin/_admin-layout/contact",
        "/admin/_admin-layout/customer",
        "/admin/_admin-layout/roles",
        "/admin/_admin-layout/settings",
        "/admin/_admin-layout/",
        "/admin/_admin-layout/customer-history/$id"
      ]
    },
    "/auth": {
      "filePath": "auth",
      "children": [
        "/auth/_auth-layout"
      ]
    },
    "/auth/_auth-layout": {
      "filePath": "auth/_auth-layout.tsx",
      "parent": "/auth",
      "children": [
        "/auth/_auth-layout/sign-in",
        "/auth/_auth-layout/sign-up"
      ]
    },
    "/_public/": {
      "filePath": "_public/index.lazy.tsx",
      "parent": "/_public"
    },
    "/admin/_admin-layout/accounts": {
      "filePath": "admin/_admin-layout/accounts.lazy.tsx",
      "parent": "/admin/_admin-layout"
    },
    "/admin/_admin-layout/category": {
      "filePath": "admin/_admin-layout/category.lazy.tsx",
      "parent": "/admin/_admin-layout"
    },
    "/admin/_admin-layout/change-password": {
      "filePath": "admin/_admin-layout/change-password.lazy.tsx",
      "parent": "/admin/_admin-layout"
    },
    "/admin/_admin-layout/contact": {
      "filePath": "admin/_admin-layout/contact.lazy.tsx",
      "parent": "/admin/_admin-layout"
    },
    "/admin/_admin-layout/customer": {
      "filePath": "admin/_admin-layout/customer.lazy.tsx",
      "parent": "/admin/_admin-layout"
    },
    "/admin/_admin-layout/roles": {
      "filePath": "admin/_admin-layout/roles.lazy.tsx",
      "parent": "/admin/_admin-layout"
    },
    "/admin/_admin-layout/settings": {
      "filePath": "admin/_admin-layout/settings.lazy.tsx",
      "parent": "/admin/_admin-layout"
    },
    "/auth/_auth-layout/sign-in": {
      "filePath": "auth/_auth-layout/sign-in.lazy.tsx",
      "parent": "/auth/_auth-layout"
    },
    "/auth/_auth-layout/sign-up": {
      "filePath": "auth/_auth-layout/sign-up.lazy.tsx",
      "parent": "/auth/_auth-layout"
    },
    "/admin/_admin-layout/": {
      "filePath": "admin/_admin-layout/index.lazy.tsx",
      "parent": "/admin/_admin-layout"
    },
    "/admin/_admin-layout/customer-history/$id": {
      "filePath": "admin/_admin-layout/customer-history.$id.lazy.tsx",
      "parent": "/admin/_admin-layout"
    }
  }
}
ROUTE_MANIFEST_END */
